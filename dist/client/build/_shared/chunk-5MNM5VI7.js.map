{
  "version": 3,
  "sources": ["../../../../node_modules/@remix-run/router/history.ts", "../../../../node_modules/@remix-run/router/utils.ts", "../../../../node_modules/@remix-run/router/router.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/use-sync-external-store-shim/index.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/context.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/hooks.tsx", "../../../../node_modules/@remix-run/react/node_modules/react-router/lib/components.tsx", "../../../../node_modules/@remix-run/react/node_modules/react-router/index.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router-dom/dom.ts", "../../../../node_modules/@remix-run/react/node_modules/react-router-dom/index.tsx", "../../../../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js", "../../../../node_modules/use-sync-external-store/shim/index.js", "../../../../node_modules/@remix-run/react/dist/esm/browser.js", "../../../../node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js", "../../../../node_modules/@remix-run/react/dist/esm/components.js", "../../../../node_modules/@remix-run/react/dist/esm/errorBoundaries.js", "../../../../node_modules/@remix-run/react/dist/esm/invariant.js", "../../../../node_modules/@remix-run/react/dist/esm/links.js", "../../../../node_modules/@remix-run/react/dist/esm/routeModules.js", "../../../../node_modules/@remix-run/react/dist/esm/markup.js", "../../../../node_modules/@remix-run/react/dist/esm/errors.js", "../../../../node_modules/@remix-run/react/dist/esm/routes.js", "../../../../node_modules/@remix-run/react/dist/esm/data.js", "../../../../node_modules/@remix-run/react/dist/esm/index.js", "../../../../node_modules/@remix-run/react/dist/esm/scroll-restoration.js"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      to,\n      future,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      href,\n      future,\n      opts,\n      true\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  future: FutureConfig,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n", "/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own&nbsp;\n          <code style={codeStyles}>ErrorBoundary</code> prop on&nbsp;\n          <code style={codeStyles}>&lt;Route&gt;</code>\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      if (match.route.ErrorBoundary) {\n        errorElement = <match.route.ErrorBoundary />;\n      } else if (match.route.errorElement) {\n        errorElement = match.route.errorElement;\n      } else {\n        errorElement = <DefaultErrorComponent />;\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode = outlet;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{ outlet, matches }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(\n    () => () => router.deleteBlocker(blockerKey),\n    [router, blockerKey]\n  );\n\n  // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n  LazyRouteFunction,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  let getState = React.useCallback(() => router.state, [router]);\n\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    getState,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    getState\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? <Routes /> : fallbackElement}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n", "import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Blocker,\n  BlockerFunction,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n  LazyRouteFunction,\n  FutureConfig,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker as unstable_Blocker,\n  BlockerFunction as unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker as unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nfunction detectErrorBoundary(route: RouteObject) {\n  if (__DEV__) {\n    if (route.Component && route.element) {\n      warning(\n        false,\n        \"You should not include both `Component` and `element` on your route - \" +\n          \"`element` will be ignored.\"\n      );\n    }\n    if (route.ErrorBoundary && route.errorElement) {\n      warning(\n        false,\n        \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" +\n          \"`errorElement` will be ignored.\"\n      );\n    }\n  }\n\n  // Note: this check also occurs in createRoutesFromChildren so update\n  // there if you change this\n  return Boolean(route.ErrorBoundary) || Boolean(route.errorElement);\n}\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    future?: FutureConfig;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  detectErrorBoundary as UNSAFE_detectErrorBoundary,\n};\n", "import type { FormEncType, HTMLFormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_detectErrorBoundary as detectErrorBoundary,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    detectErrorBoundary,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + to)\n          : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as HTMLFormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n", "/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport { RemixContext } from './components.js';\nimport { RemixErrorBoundary, RemixRootDefaultErrorBoundary } from './errorBoundaries.js';\nimport { deserializeErrors } from './errors.js';\nimport { createClientRoutes } from './routes.js';\n\n/* eslint-disable prefer-let/prefer-let */\n\nlet router;\nlet hmrAbortController;\nif (import.meta && import.meta.hot) {\n  import.meta.hot.accept(\"remix:manifest\", async newManifest => {\n    let routeIds = [...new Set(router.state.matches.map(m => m.route.id).concat(Object.keys(window.__remixRouteModules)))];\n\n    // Load new route modules that we've seen.\n    let newRouteModules = Object.assign({}, window.__remixRouteModules, Object.fromEntries((await Promise.all(routeIds.map(async id => {\n      var _newManifest$hmr, _window$__remixRouteM, _window$__remixRouteM2, _window$__remixRouteM3;\n      if (!newManifest.routes[id]) {\n        return null;\n      }\n      let imported = await import(newManifest.routes[id].module + `?t=${(_newManifest$hmr = newManifest.hmr) === null || _newManifest$hmr === void 0 ? void 0 : _newManifest$hmr.timestamp}`);\n      return [id, {\n        ...imported,\n        // react-refresh takes care of updating these in-place,\n        // if we don't preserve existing values we'll loose state.\n        default: imported.default ? ((_window$__remixRouteM = window.__remixRouteModules[id]) === null || _window$__remixRouteM === void 0 ? void 0 : _window$__remixRouteM.default) ?? imported.default : imported.default,\n        CatchBoundary: imported.CatchBoundary ? ((_window$__remixRouteM2 = window.__remixRouteModules[id]) === null || _window$__remixRouteM2 === void 0 ? void 0 : _window$__remixRouteM2.CatchBoundary) ?? imported.CatchBoundary : imported.CatchBoundary,\n        ErrorBoundary: imported.ErrorBoundary ? ((_window$__remixRouteM3 = window.__remixRouteModules[id]) === null || _window$__remixRouteM3 === void 0 ? void 0 : _window$__remixRouteM3.ErrorBoundary) ?? imported.ErrorBoundary : imported.ErrorBoundary\n      }];\n    }))).filter(Boolean)));\n    Object.assign(window.__remixRouteModules, newRouteModules);\n    // Create new routes\n    let routes = createClientRoutes(newManifest.routes, window.__remixRouteModules, window.__remixContext.future);\n\n    // This is temporary API and will be more granular before release\n    router._internalSetRoutes(routes);\n    if (hmrAbortController) {\n      hmrAbortController.abort();\n    }\n    hmrAbortController = new AbortController();\n    let signal = hmrAbortController.signal;\n    // Wait for router to be idle before updating the manifest and route modules\n    // and triggering a react-refresh\n    let unsub = router.subscribe(state => {\n      if (state.revalidation === \"idle\" && !signal.aborted) {\n        unsub();\n        // TODO: Handle race conditions here. Should abort if a new update\n        // comes in while we're waiting for the router to be idle.\n        Object.assign(window.__remixManifest, newManifest);\n        window.$RefreshRuntime$.performReactRefresh();\n      }\n    });\n    router.revalidate();\n  });\n}\n\n/**\n * The entry point for a Remix app when it is rendered in the browser (in\n * `app/entry.client.js`). This component is used by React to hydrate the HTML\n * that was received from the server.\n */\nfunction RemixBrowser(_props) {\n  if (!router) {\n    let routes = createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);\n    let hydrationData = window.__remixContext.state;\n    if (hydrationData && hydrationData.errors) {\n      hydrationData = {\n        ...hydrationData,\n        errors: deserializeErrors(hydrationData.errors)\n      };\n    }\n    router = createBrowserRouter(routes, {\n      hydrationData,\n      future: {\n        // Pass through the Remix future flag to avoid a v1 breaking change in\n        // useNavigation() - users can control the casing via the flag in v1.\n        // useFetcher still always uppercases in the back-compat layer in v1.\n        // In v2 we can just always pass true here and remove the back-compat\n        // layer\n        v7_normalizeFormMethod: window.__remixContext.future.v2_normalizeFormMethod\n      }\n    });\n  }\n\n  // We need to include a wrapper RemixErrorBoundary here in case the root error\n  // boundary also throws and we need to bubble up outside of the router entirely.\n  // Then we need a stateful location here so the user can back-button navigate\n  // out of there\n  let location = useSyncExternalStore(router.subscribe, () => router.state.location, () => router.state.location);\n  return /*#__PURE__*/React.createElement(RemixContext.Provider, {\n    value: {\n      manifest: window.__remixManifest,\n      routeModules: window.__remixRouteModules,\n      future: window.__remixContext.future\n    }\n  }, /*#__PURE__*/React.createElement(RemixErrorBoundary, {\n    location: location,\n    component: RemixRootDefaultErrorBoundary\n  }, /*#__PURE__*/React.createElement(RouterProvider, {\n    router: router,\n    fallbackElement: null\n  })));\n}\n\nexport { RemixBrowser };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useHref, NavLink as NavLink$1, Link as Link$1, matchRoutes, useLocation, Await as Await$1, useNavigation, useAsyncError, useMatches as useMatches$1, useLoaderData as useLoaderData$1, useActionData as useActionData$1, useFetchers as useFetchers$1, useFetcher as useFetcher$1, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, useRouteError, isRouteErrorResponse } from 'react-router-dom';\nimport { RemixRootDefaultErrorBoundary, RemixCatchBoundary, V2_RemixRootDefaultErrorBoundary, RemixRootDefaultCatchBoundary } from './errorBoundaries.js';\nimport invariant from './invariant.js';\nimport { getLinksForMatches, isPageLinkDescriptor, getNewMatchesForLinks, getDataLinkHrefs, getModuleLinkHrefs, getStylesheetPrefetchLinks } from './links.js';\nimport { escapeHtml, createHtml } from './markup.js';\nimport { IDLE_TRANSITION, IDLE_FETCHER } from './transition.js';\nimport { logDeprecationOnce } from './warnings.js';\n\nfunction useDataRouterContext() {\n  let context = React.useContext(UNSAFE_DataRouterContext);\n  invariant(context, \"You must render this element inside a <DataRouterContext.Provider> element\");\n  return context;\n}\nfunction useDataRouterStateContext() {\n  let context = React.useContext(UNSAFE_DataRouterStateContext);\n  invariant(context, \"You must render this element inside a <DataRouterStateContext.Provider> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixContext\n\nconst RemixContext = /*#__PURE__*/React.createContext(undefined);\nRemixContext.displayName = \"Remix\";\nfunction useRemixContext() {\n  let context = React.useContext(RemixContext);\n  invariant(context, \"You must render this element inside a <Remix> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixRoute\n\nfunction RemixRoute({\n  id\n}) {\n  let {\n    routeModules\n  } = useRemixContext();\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let {\n    default: Component\n  } = routeModules[id];\n  invariant(Component, `Route \"${id}\" has no component! Please go add a \\`default\\` export in the route module file.\\n` + \"If you were trying to navigate or submit to a resource route, use `<a>` instead of `<Link>` or `<Form reloadDocument>`.\");\n  return /*#__PURE__*/React.createElement(Component, null);\n}\nfunction RemixRouteError({\n  id\n}) {\n  let {\n    future,\n    routeModules\n  } = useRemixContext();\n\n  // This checks prevent cryptic error messages such as: 'Cannot read properties of undefined (reading 'root')'\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let error = useRouteError();\n  let {\n    CatchBoundary,\n    ErrorBoundary\n  } = routeModules[id];\n  if (future.v2_errorBoundary) {\n    // Provide defaults for the root route if they are not present\n    if (id === \"root\") {\n      ErrorBoundary || (ErrorBoundary = V2_RemixRootDefaultErrorBoundary);\n    }\n    if (ErrorBoundary) {\n      // TODO: Unsure if we can satisfy the typings here\n      // @ts-expect-error\n      return /*#__PURE__*/React.createElement(ErrorBoundary, null);\n    }\n    throw error;\n  }\n\n  // Provide defaults for the root route if they are not present\n  if (id === \"root\") {\n    CatchBoundary || (CatchBoundary = RemixRootDefaultCatchBoundary);\n    ErrorBoundary || (ErrorBoundary = RemixRootDefaultErrorBoundary);\n  }\n  if (isRouteErrorResponse(error)) {\n    let tError = error;\n    if ((tError === null || tError === void 0 ? void 0 : tError.error) instanceof Error && tError.status !== 404 && ErrorBoundary) {\n      // Internal framework-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(ErrorBoundary, {\n        error: tError.error\n      });\n    }\n    if (CatchBoundary) {\n      // User-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(RemixCatchBoundary, {\n        component: CatchBoundary,\n        catch: error\n      });\n    }\n  }\n  if (error instanceof Error && ErrorBoundary) {\n    // User- or framework-thrown Errors\n    return /*#__PURE__*/React.createElement(ErrorBoundary, {\n      error: error\n    });\n  }\n  throw error;\n}\n////////////////////////////////////////////////////////////////////////////////\n// Public API\n\n/**\n * Defines the prefetching behavior of the link:\n *\n * - \"intent\": Fetched when the user focuses or hovers the link\n * - \"render\": Fetched when the link is rendered\n * - \"none\": Never fetched\n */\n\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let [maybePrefetch, setMaybePrefetch] = React.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React.useState(false);\n  let {\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart\n  } = theirElementProps;\n  React.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n  }, [prefetch]);\n  let setIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(true);\n    }\n  };\n  let cancelIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(false);\n      setShouldPrefetch(false);\n    }\n  };\n  React.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  return [shouldPrefetch, {\n    onFocus: composeEventHandlers(onFocus, setIntent),\n    onBlur: composeEventHandlers(onBlur, cancelIntent),\n    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n    onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n  }];\n}\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * A special kind of `<Link>` that knows whether or not it is \"active\".\n *\n * @see https://remix.run/components/nav-link\n */\nlet NavLink = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavLink$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nNavLink.displayName = \"NavLink\";\n\n/**\n * This component renders an anchor tag and is the primary way the user will\n * navigate around your website.\n *\n * @see https://remix.run/components/link\n */\nlet Link = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nLink.displayName = \"Link\";\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\nlet linksWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: The behavior of links `imagesizes` and `imagesrcset` will be changing in v2. \" + \"Only the React camel case versions will be valid. Please change to `imageSizes` and `imageSrcSet`.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#links-imagesizes-and-imagesrcset\";\nlet useTransitionWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: `useTransition` will be removed in v2 in favor of `useNavigation`. \" + \"You can prepare for this change at your convenience by updating to `useNavigation`.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usetransition\";\nlet fetcherTypeWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE: `fetcher.type` will be removed in v2. \" + \"Please use `fetcher.state`, `fetcher.formData`, and `fetcher.data` to achieve the same UX.\" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\nlet fetcherSubmissionWarning = \"\u26A0\uFE0F REMIX FUTURE CHANGE : `fetcher.submission` will be removed in v2. \" + \"The submission fields are now part of the fetcher object itself (`fetcher.formData`). \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\n\n/**\n * Renders the `<link>` tags for the current routes.\n *\n * @see https://remix.run/components/links\n */\nfunction Links() {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let links = React.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);\n  React.useEffect(() => {\n    if (links.some(link => \"imagesizes\" in link || \"imagesrcset\" in link)) {\n      logDeprecationOnce(linksWarning);\n    }\n  }, [links]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, links.map(link => {\n    if (isPageLinkDescriptor(link)) {\n      return /*#__PURE__*/React.createElement(PrefetchPageLinks, _extends({\n        key: link.page\n      }, link));\n    }\n    let imageSrcSet = null;\n\n    // In React 17, <link imageSrcSet> and <link imageSizes> will warn\n    // because the DOM attributes aren't recognized, so users need to pass\n    // them in all lowercase to forward the attributes to the node without a\n    // warning. Normalize so that either property can be used in Remix.\n    if (\"useId\" in React) {\n      if (link.imagesrcset) {\n        link.imageSrcSet = imageSrcSet = link.imagesrcset;\n        delete link.imagesrcset;\n      }\n      if (link.imagesizes) {\n        link.imageSizes = link.imagesizes;\n        delete link.imagesizes;\n      }\n    } else {\n      if (link.imageSrcSet) {\n        link.imagesrcset = imageSrcSet = link.imageSrcSet;\n        delete link.imageSrcSet;\n      }\n      if (link.imageSizes) {\n        link.imagesizes = link.imageSizes;\n        delete link.imageSizes;\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"link\", _extends({\n      key: link.rel + (link.href || \"\") + (imageSrcSet || \"\")\n    }, link));\n  }));\n}\n\n/**\n * This component renders all of the `<link rel=\"prefetch\">` and\n * `<link rel=\"modulepreload\"/>` tags for all the assets (data, modules, css) of\n * a given page.\n *\n * @param props\n * @param props.page\n * @see https://remix.run/components/prefetch-page-links\n */\nfunction PrefetchPageLinks({\n  page,\n  ...dataLinkProps\n}) {\n  let {\n    router\n  } = useDataRouterContext();\n  let matches = React.useMemo(() => matchRoutes(router.routes, page), [router.routes, page]);\n  if (!matches) {\n    console.warn(`Tried to prefetch ${page} but no routes matched.`);\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(PrefetchPageLinksImpl, _extends({\n    page: page,\n    matches: matches\n  }, dataLinkProps));\n}\nfunction usePrefetchedStylesheets(matches) {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let [styleLinks, setStyleLinks] = React.useState([]);\n  React.useEffect(() => {\n    let interrupted = false;\n    getStylesheetPrefetchLinks(matches, manifest, routeModules).then(links => {\n      if (!interrupted) setStyleLinks(links);\n    });\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, manifest, routeModules]);\n  return styleLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let {\n    manifest\n  } = useRemixContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let newMatchesForData = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"data\"), [page, nextMatches, matches, manifest, location]);\n  let newMatchesForAssets = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"assets\"), [page, nextMatches, matches, manifest, location]);\n  let dataHrefs = React.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]);\n  let moduleHrefs = React.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]);\n\n  // needs to be a hook with async behavior because we need the modules, not\n  // just the manifest like the other links in here.\n  let styleLinks = usePrefetchedStylesheets(newMatchesForAssets);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dataHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"prefetch\",\n    as: \"fetch\",\n    href: href\n  }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"modulepreload\",\n    href: href\n  }, linkProps))), styleLinks.map(link =>\n  /*#__PURE__*/\n  // these don't spread `linkProps` because they are full link descriptors\n  // already with their own props\n  React.createElement(\"link\", _extends({\n    key: link.href\n  }, link))));\n}\n\n/**\n * Renders the `<title>` and `<meta>` tags for the current routes.\n *\n * @see https://remix.run/components/meta\n */\nfunction V1Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    matches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let meta = {};\n  let parentsData = {};\n  for (let match of matches) {\n    let routeId = match.route.id;\n    let data = loaderData[routeId];\n    let params = match.params;\n    let routeModule = routeModules[routeId];\n    if (routeModule.meta) {\n      let routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        parentsData,\n        params,\n        location\n      }) : routeModule.meta;\n      if (routeMeta && Array.isArray(routeMeta)) {\n        throw new Error(\"The route at \" + match.route.path + \" returns an array. This is only supported with the `v2_meta` future flag \" + \"in the Remix config. Either set the flag to `true` or update the route's \" + \"meta function to return an object.\" + \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\"\n        // TODO: Add link to the docs once they are written\n        // + \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\"\n        );\n      }\n\n      Object.assign(meta, routeMeta);\n    }\n    parentsData[routeId] = data;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(meta).map(([name, value]) => {\n    if (!value) {\n      return null;\n    }\n    if ([\"charset\", \"charSet\"].includes(name)) {\n      return /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: value\n      });\n    }\n    if (name === \"title\") {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(value));\n    }\n\n    // Open Graph tags use the `property` attribute, while other meta tags\n    // use `name`. See https://ogp.me/\n    //\n    // Namespaced attributes:\n    //  - https://ogp.me/#type_music\n    //  - https://ogp.me/#type_video\n    //  - https://ogp.me/#type_article\n    //  - https://ogp.me/#type_book\n    //  - https://ogp.me/#type_profile\n    //\n    // Facebook specific tags begin with `fb:` and also use the `property`\n    // attribute.\n    //\n    // Twitter specific tags begin with `twitter:` but they use `name`, so\n    // they are excluded.\n    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);\n    return [value].flat().map(content => {\n      if (isOpenGraphTag) {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          property: name,\n          content: content,\n          key: name + content\n        });\n      }\n      if (typeof content === \"string\") {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          name: name,\n          content: content,\n          key: name + content\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"meta\", _extends({\n        key: name + JSON.stringify(content)\n      }, content));\n    });\n  }));\n}\nfunction V2Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    matches: _matches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let meta = [];\n  let leafMeta = null;\n  let matches = [];\n  for (let i = 0; i < _matches.length; i++) {\n    let _match = _matches[i];\n    let routeId = _match.route.id;\n    let data = loaderData[routeId];\n    let params = _match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    let match = {\n      id: routeId,\n      data,\n      meta: [],\n      params: _match.params,\n      pathname: _match.pathname,\n      handle: _match.route.handle,\n      // TODO: Remove in v2. Only leaving it for now because we used it in\n      // examples and there's no reason to crash someone's build for one line.\n      // They'll get a TS error from the type updates anyway.\n      // @ts-expect-error\n      get route() {\n        console.warn(\"The meta function in \" + _match.route.path + \" accesses the `route` property on `matches`. This is deprecated and will be removed in Remix version 2. See\");\n        return _match.route;\n      }\n    };\n    matches[i] = match;\n    if (routeModule !== null && routeModule !== void 0 && routeModule.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        params,\n        location,\n        matches\n      }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta;\n    } else if (leafMeta) {\n      // We only assign the route's meta to the nearest leaf if there is no meta\n      // export in the route. The meta function may return a falsey value which\n      // is effectively the same as an empty array.\n      routeMeta = [...leafMeta];\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\"The `v2_meta` API is enabled in the Remix config, but the route at \" + _match.route.path + \" returns an invalid value. In v2, all route meta functions must \" + \"return an array of meta objects.\" +\n      // TODO: Add link to the docs once they are written\n      // \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\" +\n      \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\");\n    }\n    match.meta = routeMeta;\n    matches[i] = match;\n    meta = [...routeMeta];\n    leafMeta = meta;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, meta.flat().map(metaProps => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"tagName\" in metaProps) {\n      let tagName = metaProps.tagName;\n      delete metaProps.tagName;\n      if (!isValidMetaTag(tagName)) {\n        console.warn(`A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`);\n        return null;\n      }\n      let Comp = tagName;\n      return /*#__PURE__*/React.createElement(Comp, _extends({\n        key: JSON.stringify(metaProps)\n      }, metaProps));\n    }\n    if (\"title\" in metaProps) {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(metaProps.title));\n    }\n    if (\"charset\" in metaProps) {\n      metaProps.charSet ?? (metaProps.charSet = metaProps.charset);\n      delete metaProps.charset;\n    }\n    if (\"charSet\" in metaProps && metaProps.charSet != null) {\n      return typeof metaProps.charSet === \"string\" ? /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: metaProps.charSet\n      }) : null;\n    }\n    if (\"script:ld+json\" in metaProps) {\n      let json = null;\n      try {\n        json = JSON.stringify(metaProps[\"script:ld+json\"]);\n      } catch (err) {}\n      return json != null && /*#__PURE__*/React.createElement(\"script\", {\n        key: \"script:ld+json\",\n        type: \"application/ld+json\",\n        dangerouslySetInnerHTML: {\n          __html: JSON.stringify(metaProps[\"script:ld+json\"])\n        }\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"meta\", _extends({\n      key: JSON.stringify(metaProps)\n    }, metaProps));\n  }));\n}\nfunction isValidMetaTag(tagName) {\n  return typeof tagName === \"string\" && /^(meta|link)$/.test(tagName);\n}\nfunction Meta() {\n  let {\n    future\n  } = useRemixContext();\n  return future !== null && future !== void 0 && future.v2_meta ? /*#__PURE__*/React.createElement(V2Meta, null) : /*#__PURE__*/React.createElement(V1Meta, null);\n}\nfunction Await(props) {\n  return /*#__PURE__*/React.createElement(Await$1, props);\n}\n\n/**\n * Tracks whether Remix has finished hydrating or not, so scripts can be skipped\n * during client-side updates.\n */\nlet isHydrated = false;\n/**\n * Renders the `<script>` tags needed for the initial render. Bundles for\n * additional routes are loaded later as needed.\n *\n * @param props Additional properties to add to each script tag that is rendered.\n * In addition to scripts, \\<link rel=\"modulepreload\"> tags receive the crossOrigin\n * property if provided.\n *\n * @see https://remix.run/components/scripts\n */\nfunction Scripts(props) {\n  let {\n    manifest,\n    serverHandoffString,\n    abortDelay\n  } = useRemixContext();\n  let {\n    router,\n    static: isStatic,\n    staticContext\n  } = useDataRouterContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let deferredScripts = [];\n  let initialScripts = React.useMemo(() => {\n    var _manifest$hmr;\n    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : \" \";\n    let activeDeferreds = staticContext === null || staticContext === void 0 ? void 0 : staticContext.activeDeferreds;\n    // This sets up the __remixContext with utility functions used by the\n    // deferred scripts.\n    // - __remixContext.p is a function that takes a resolved value or error and returns a promise.\n    //   This is used for transmitting pre-resolved promises from the server to the client.\n    // - __remixContext.n is a function that takes a routeID and key to returns a promise for later\n    //   resolution by the subsequently streamed chunks.\n    // - __remixContext.r is a function that takes a routeID, key and value or error and resolves\n    //   the promise created by __remixContext.n.\n    // - __remixContext.t is a a map or routeId to keys to an object containing `e` and `r` methods\n    //   to resolve or reject the promise created by __remixContext.n.\n    // - __remixContext.a is the active number of deferred scripts that should be rendered to match\n    //   the SSR tree for hydration on the client.\n    contextScript += !activeDeferreds ? \"\" : [\"__remixContext.p = function(v,e,p,x) {\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p=Promise.reject(x);\", \"  } else {\", \"    p=Promise.resolve(v);\", \"  }\", \"  return p;\", \"};\", \"__remixContext.n = function(i,k) {\", \"  __remixContext.t = __remixContext.t || {};\", \"  __remixContext.t[i] = __remixContext.t[i] || {};\", \"  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});\", typeof abortDelay === \"number\" ? `setTimeout(() => {if(typeof p._error !== \"undefined\" || typeof p._data !== \"undefined\"){return;} __remixContext.t[i][k].e(new Error(\"Server timeout.\"))}, ${abortDelay});` : \"\", \"  return p;\", \"};\", \"__remixContext.r = function(i,k,v,e,p,x) {\", \"  p = __remixContext.t[i][k];\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p.e(x);\", \"  } else {\", \"    p.r(v);\", \"  }\", \"};\"].join(\"\\n\") + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {\n      let pendingKeys = new Set(deferredData.pendingKeys);\n      let promiseKeyValues = deferredData.deferredKeys.map(key => {\n        if (pendingKeys.has(key)) {\n          deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n            key: `${routeId} | ${key}`,\n            deferredData: deferredData,\n            routeId: routeId,\n            dataKey: key\n          }));\n          return `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;\n        } else {\n          let trackedPromise = deferredData.data[key];\n          if (typeof trackedPromise._error !== \"undefined\") {\n            let toSerialize = process.env.NODE_ENV === \"development\" ? {\n              message: trackedPromise._error.message,\n              stack: trackedPromise._error.stack\n            } : {\n              message: \"Unexpected Server Error\",\n              stack: undefined\n            };\n            return `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml(JSON.stringify(toSerialize))})`;\n          } else {\n            if (typeof trackedPromise._data === \"undefined\") {\n              throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise?`);\n            }\n            return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml(JSON.stringify(trackedPromise._data))})`;\n          }\n        }\n      }).join(\",\\n\");\n      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;\n    }).join(\"\\n\") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : \"\");\n    let routeModulesScript = !isStatic ? \" \" : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : \"\"}import ${JSON.stringify(manifest.url)};\n${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(\"\\n\")}\nwindow.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(contextScript),\n      type: undefined\n    })), /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(routeModulesScript),\n      type: \"module\",\n      async: true\n    })));\n    // disabled deps array because we are purposefully only rendering this once\n    // for hydration, after that we want to just continue rendering the initial\n    // scripts as they were when the page first loaded\n    // eslint-disable-next-line\n  }, []);\n  if (!isStatic && typeof __remixContext === \"object\" && __remixContext.a) {\n    for (let i = 0; i < __remixContext.a; i++) {\n      deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n        key: i\n      }));\n    }\n  }\n\n  // avoid waterfall when importing the next route module\n  let nextMatches = React.useMemo(() => {\n    if (navigation.location) {\n      // FIXME: can probably use transitionManager `nextMatches`\n      let matches = matchRoutes(router.routes, navigation.location);\n      invariant(matches, `No routes match path \"${navigation.location.pathname}\"`);\n      return matches;\n    }\n    return [];\n  }, [navigation.location, router.routes]);\n  let routePreloads = matches.concat(nextMatches).map(match => {\n    let route = manifest.routes[match.route.id];\n    return (route.imports || []).concat([route.module]);\n  }).flat(1);\n  let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.url,\n    crossOrigin: props.crossOrigin\n  }), /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.entry.module,\n    crossOrigin: props.crossOrigin\n  }), dedupe(preloads).map(path => /*#__PURE__*/React.createElement(\"link\", {\n    key: path,\n    rel: \"modulepreload\",\n    href: path,\n    crossOrigin: props.crossOrigin\n  })), !isHydrated && initialScripts, !isHydrated && deferredScripts);\n}\nfunction DeferredHydrationScript({\n  dataKey,\n  deferredData,\n  routeId\n}) {\n  if (typeof document === \"undefined\" && deferredData && dataKey && routeId) {\n    invariant(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`);\n  }\n  return /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback:\n    // This makes absolutely no sense. The server renders null as a fallback,\n    // but when hydrating, we need to render a script tag to avoid a hydration issue.\n    // To reproduce a hydration mismatch, just render null as a fallback.\n    typeof document === \"undefined\" && deferredData && dataKey && routeId ? null : /*#__PURE__*/React.createElement(\"script\", {\n      async: true,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: \" \"\n      }\n    })\n  }, typeof document === \"undefined\" && deferredData && dataKey && routeId ? /*#__PURE__*/React.createElement(Await, {\n    resolve: deferredData.data[dataKey],\n    errorElement: /*#__PURE__*/React.createElement(ErrorDeferredHydrationScript, {\n      dataKey: dataKey,\n      routeId: routeId\n    }),\n    children: data => /*#__PURE__*/React.createElement(\"script\", {\n      async: true,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${escapeHtml(JSON.stringify(data))});`\n      }\n    })\n  }) : /*#__PURE__*/React.createElement(\"script\", {\n    async: true,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: \" \"\n    }\n  }));\n}\nfunction ErrorDeferredHydrationScript({\n  dataKey,\n  routeId\n}) {\n  let error = useAsyncError();\n  let toSerialize = process.env.NODE_ENV === \"development\" ? {\n    message: error.message,\n    stack: error.stack\n  } : {\n    message: \"Unexpected Server Error\",\n    stack: undefined\n  };\n  return /*#__PURE__*/React.createElement(\"script\", {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, !1, ${escapeHtml(JSON.stringify(toSerialize))});`\n    }\n  });\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\n\n// TODO: Can this be re-exported from RR?\n\nfunction useMatches() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let matches = useMatches$1();\n  return React.useMemo(() => matches.map(match => {\n    let remixMatch = {\n      id: match.id,\n      pathname: match.pathname,\n      params: match.params,\n      data: match.data,\n      // Need to grab handle here since we don't have it at client-side route\n      // creation time\n      handle: routeModules[match.id].handle\n    };\n    return remixMatch;\n  }), [matches, routeModules]);\n}\n\n/**\n * Returns the JSON parsed data from the current route's `loader`.\n *\n * @see https://remix.run/hooks/use-loader-data\n */\nfunction useLoaderData() {\n  return useLoaderData$1();\n}\n\n/**\n * Returns the JSON parsed data from the current route's `action`.\n *\n * @see https://remix.run/hooks/use-action-data\n */\nfunction useActionData() {\n  return useActionData$1();\n}\n\n/**\n * Returns everything you need to know about a page transition to build pending\n * navigation indicators and optimistic UI on data mutations.\n *\n * @deprecated in favor of useNavigation\n *\n * @see https://remix.run/hooks/use-transition\n */\nfunction useTransition() {\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    logDeprecationOnce(useTransitionWarning);\n  }, []);\n  return React.useMemo(() => convertNavigationToTransition(navigation), [navigation]);\n}\nfunction convertNavigationToTransition(navigation) {\n  let {\n    location,\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = navigation;\n  if (!location) {\n    return IDLE_TRANSITION;\n  }\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"submitting\" && formMethod && formAction && formEncType && formData) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let transition = {\n        location,\n        state,\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData: formData,\n          key: \"\"\n        },\n        type: \"actionSubmission\"\n      };\n      return transition;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected navigation scenario in useTransition()\");\n    }\n  }\n  if (state === \"loading\") {\n    let {\n      _isRedirect,\n      _isFetchActionRedirect\n    } = location.state || {};\n    if (formMethod && formAction && formEncType && formData) {\n      if (!_isRedirect) {\n        if (isActionSubmission) {\n          // We're reloading the same location after an action submission\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionReload\"\n          };\n          return transition;\n        } else {\n          // The new router fixes a bug in useTransition where the submission\n          // \"action\" represents the request URL not the state of the <form> in\n          // the DOM.  Back-port it here to maintain behavior, but useNavigation\n          // will fix this bug.\n          let url = new URL(formAction, window.location.origin);\n\n          // This typing override should be safe since this is only running for\n          // GET submissions and over in @remix-run/router we have an invariant\n          // if you have any non-string values in your FormData when we attempt\n          // to convert them to URLSearchParams\n          url.search = new URLSearchParams(formData.entries()).toString();\n\n          // Actively \"submitting\" to a loader\n          let transition = {\n            location,\n            state: \"submitting\",\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: url.pathname + url.search,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmission\"\n          };\n          return transition;\n        }\n      } else {\n        // Redirecting after a submission\n        if (isActionSubmission) {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionRedirect\"\n          };\n          return transition;\n        } else {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmissionRedirect\"\n          };\n          return transition;\n        }\n      }\n    } else if (_isRedirect) {\n      if (_isFetchActionRedirect) {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"fetchActionRedirect\"\n        };\n        return transition;\n      } else {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"normalRedirect\"\n        };\n        return transition;\n      }\n    }\n  }\n\n  // If no scenarios above match, then it's a normal load!\n  let transition = {\n    location,\n    state: \"loading\",\n    submission: undefined,\n    type: \"normalLoad\"\n  };\n  return transition;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n *\n * @see https://remix.run/api/remix#usefetchers\n */\nfunction useFetchers() {\n  let fetchers = useFetchers$1();\n  return fetchers.map(f => {\n    let fetcher = convertRouterFetcherToRemixFetcher({\n      state: f.state,\n      data: f.data,\n      formMethod: f.formMethod,\n      formAction: f.formAction,\n      formData: f.formData,\n      formEncType: f.formEncType,\n      \" _hasFetcherDoneAnything \": f[\" _hasFetcherDoneAnything \"]\n    });\n    addFetcherDeprecationWarnings(fetcher);\n    return fetcher;\n  });\n}\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n *\n * @see https://remix.run/hooks/use-fetcher\n */\nfunction useFetcher() {\n  let fetcherRR = useFetcher$1();\n  return React.useMemo(() => {\n    let remixFetcher = convertRouterFetcherToRemixFetcher({\n      state: fetcherRR.state,\n      data: fetcherRR.data,\n      formMethod: fetcherRR.formMethod,\n      formAction: fetcherRR.formAction,\n      formData: fetcherRR.formData,\n      formEncType: fetcherRR.formEncType,\n      \" _hasFetcherDoneAnything \": fetcherRR[\" _hasFetcherDoneAnything \"]\n    });\n    let fetcherWithComponents = {\n      ...remixFetcher,\n      load: fetcherRR.load,\n      submit: fetcherRR.submit,\n      Form: fetcherRR.Form\n    };\n    addFetcherDeprecationWarnings(fetcherWithComponents);\n    return fetcherWithComponents;\n  }, [fetcherRR]);\n}\nfunction addFetcherDeprecationWarnings(fetcher) {\n  let type = fetcher.type;\n  Object.defineProperty(fetcher, \"type\", {\n    get() {\n      logDeprecationOnce(fetcherTypeWarning);\n      return type;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      type = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n  let submission = fetcher.submission;\n  Object.defineProperty(fetcher, \"submission\", {\n    get() {\n      logDeprecationOnce(fetcherSubmissionWarning);\n      return submission;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      submission = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n}\nfunction convertRouterFetcherToRemixFetcher(fetcherRR) {\n  let {\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData,\n    data\n  } = fetcherRR;\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"idle\") {\n    if (fetcherRR[\" _hasFetcherDoneAnything \"] === true) {\n      let fetcher = {\n        state: \"idle\",\n        type: \"done\",\n        formMethod: undefined,\n        formAction: undefined,\n        formData: undefined,\n        formEncType: undefined,\n        submission: undefined,\n        data\n      };\n      return fetcher;\n    } else {\n      let fetcher = IDLE_FETCHER;\n      return fetcher;\n    }\n  }\n  if (state === \"submitting\" && formMethod && formAction && formEncType && formData) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let fetcher = {\n        state,\n        type: \"actionSubmission\",\n        formMethod: formMethod.toUpperCase(),\n        formAction: formAction,\n        formEncType: formEncType,\n        formData: formData,\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData: formData,\n          key: \"\"\n        },\n        data\n      };\n      return fetcher;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected fetcher scenario in useFetcher()\");\n    }\n  }\n  if (state === \"loading\") {\n    if (formMethod && formAction && formEncType && formData) {\n      if (isActionSubmission) {\n        if (data) {\n          // In a loading state but we have data - must be an actionReload\n          let fetcher = {\n            state,\n            type: \"actionReload\",\n            formMethod: formMethod.toUpperCase(),\n            formAction: formAction,\n            formEncType: formEncType,\n            formData: formData,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            data\n          };\n          return fetcher;\n        } else {\n          let fetcher = {\n            state,\n            type: \"actionRedirect\",\n            formMethod: formMethod.toUpperCase(),\n            formAction: formAction,\n            formEncType: formEncType,\n            formData: formData,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            data: undefined\n          };\n          return fetcher;\n        }\n      } else {\n        // The new router fixes a bug in useTransition where the submission\n        // \"action\" represents the request URL not the state of the <form> in\n        // the DOM.  Back-port it here to maintain behavior, but useNavigation\n        // will fix this bug.\n        let url = new URL(formAction, window.location.origin);\n\n        // This typing override should be safe since this is only running for\n        // GET submissions and over in @remix-run/router we have an invariant\n        // if you have any non-string values in your FormData when we attempt\n        // to convert them to URLSearchParams\n        url.search = new URLSearchParams(formData.entries()).toString();\n\n        // Actively \"submitting\" to a loader\n        let fetcher = {\n          state: \"submitting\",\n          type: \"loaderSubmission\",\n          formMethod: formMethod.toUpperCase(),\n          formAction: formAction,\n          formEncType: formEncType,\n          formData: formData,\n          submission: {\n            method: formMethod.toUpperCase(),\n            action: url.pathname + url.search,\n            encType: formEncType,\n            formData: formData,\n            key: \"\"\n          },\n          data\n        };\n        return fetcher;\n      }\n    }\n  }\n\n  // If all else fails, it's a normal load!\n  let fetcher = {\n    state: \"loading\",\n    type: \"normalLoad\",\n    formMethod: undefined,\n    formAction: undefined,\n    formData: undefined,\n    formEncType: undefined,\n    submission: undefined,\n    data\n  };\n  return fetcher;\n}\n\n// Dead Code Elimination magic for production builds.\n// This way devs don't have to worry about doing the NODE_ENV check themselves.\n// If running an un-bundled server outside of `remix dev` you will still need\n// to set the REMIX_DEV_SERVER_WS_PORT manually.\nconst LiveReload = process.env.NODE_ENV !== \"development\" ? () => null : function LiveReload({\n  port = Number(process.env.REMIX_DEV_SERVER_WS_PORT || 8002),\n  timeoutMs = 1000,\n  nonce = undefined\n}) {\n  let js = String.raw;\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: nonce,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: js`\n                function remixLiveReloadConnect(config) {\n                  let protocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n                  let host = location.hostname;\n                  let port = (window.__remixContext && window.__remixContext.dev && window.__remixContext.dev.liveReloadPort) || ${String(port)};\n                  let socketPath = protocol + \"//\" + host + \":\" + port + \"/socket\";\n                  let ws = new WebSocket(socketPath);\n                  ws.onmessage = async (message) => {\n                    let event = JSON.parse(message.data);\n                    if (event.type === \"LOG\") {\n                      console.log(event.message);\n                    }\n                    if (event.type === \"RELOAD\") {\n                      console.log(\"\uD83D\uDCBF Reloading window ...\");\n                      window.location.reload();\n                    }\n                    if (event.type === \"HMR\") {\n                      if (!window.__hmr__ || !window.__hmr__.contexts) {\n                        console.log(\"\uD83D\uDCBF [HMR] No HMR context, reloading window ...\");\n                        window.location.reload();\n                        return;\n                      }\n                      if (!event.updates || !event.updates.length) return;\n                      let updateAccepted = false;\n                      for (let update of event.updates) {\n                        console.log(\"[HMR] \" + update.reason + \" [\" + update.id +\"]\")\n                        if (update.revalidate) {\n                          console.log(\"[HMR] Revalidating [\" + update.id + \"]\");\n                        }\n                        let imported = await import(update.url +  '?t=' + event.assetsManifest.hmr.timestamp);\n                        if (window.__hmr__.contexts[update.id]) {\n                          let accepted = window.__hmr__.contexts[update.id].emit(\n                            imported\n                          );\n                          if (accepted) {\n                            console.log(\"[HMR] Updated accepted by\", update.id);\n                            updateAccepted = true;\n                          }\n                        }\n                      }\n                      if (event.assetsManifest && window.__hmr__.contexts[\"remix:manifest\"]) {\n                        let accepted = window.__hmr__.contexts[\"remix:manifest\"].emit(\n                          event.assetsManifest\n                        );\n                        if (accepted) {\n                          console.log(\"[HMR] Updated accepted by\", \"remix:manifest\");\n                          updateAccepted = true;\n                        }\n                      }\n                      if (!updateAccepted) {\n                        console.log(\"[HMR] Updated rejected, reloading...\");\n                        window.location.reload();\n                      }\n                    }\n                  };\n                  ws.onopen = () => {\n                    if (config && typeof config.onOpen === \"function\") {\n                      config.onOpen();\n                    }\n                  };\n                  ws.onclose = (event) => {\n                    if (event.code === 1006) {\n                      console.log(\"Remix dev asset server web socket closed. Reconnecting...\");\n                      setTimeout(\n                        () =>\n                          remixLiveReloadConnect({\n                            onOpen: () => window.location.reload(),\n                          }),\n                      ${String(timeoutMs)}\n                      );\n                    }\n                  };\n                  ws.onerror = (error) => {\n                    console.log(\"Remix dev asset server web socket error:\");\n                    console.error(error);\n                  };\n                }\n                remixLiveReloadConnect();\n              `\n    }\n  });\n};\n\nexport { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixContext, RemixRoute, RemixRouteError, Scripts, composeEventHandlers, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport React__default, { useContext } from 'react';\nimport { useRouteError, isRouteErrorResponse } from 'react-router-dom';\n\nclass RemixErrorBoundary extends React__default.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: props.error || null,\n      location: props.location\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application (even the HTML!) that will have no effect--the error page\n    // continues to display. This gives us a mechanism to recover from the error\n    // when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error || null,\n        location: props.location\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location\n    };\n  }\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/React__default.createElement(this.props.component, {\n        error: this.state.error\n      });\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\n/**\n * When app's don't provide a root level ErrorBoundary, we default to this.\n */\nfunction RemixRootDefaultErrorBoundary({\n  error\n}) {\n  console.error(error);\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Application Error!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"main\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontSize: \"24px\"\n    }\n  }, \"Application Error\"), /*#__PURE__*/React__default.createElement(\"pre\", {\n    style: {\n      padding: \"2rem\",\n      background: \"hsla(10, 50%, 50%, 0.1)\",\n      color: \"red\",\n      overflow: \"auto\"\n    }\n  }, error.stack)), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information.\"\n              );\n            `\n    }\n  })));\n}\nfunction V2_RemixRootDefaultErrorBoundary() {\n  let error = useRouteError();\n  if (isRouteErrorResponse(error)) {\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultCatchBoundaryImpl, {\n      caught: error\n    });\n  } else if (error instanceof Error) {\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultErrorBoundary, {\n      error: error\n    });\n  } else {\n    let errorString = error == null ? \"Unknown Error\" : typeof error === \"object\" && \"toString\" in error ? error.toString() : JSON.stringify(error);\n    return /*#__PURE__*/React__default.createElement(RemixRootDefaultErrorBoundary, {\n      error: new Error(errorString)\n    });\n  }\n}\nlet RemixCatchContext = /*#__PURE__*/React__default.createContext(undefined);\n\n/**\n * Returns the status code and thrown response data.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/catch-boundary\n */\nfunction useCatch() {\n  return useContext(RemixCatchContext);\n}\nfunction RemixCatchBoundary({\n  catch: catchVal,\n  component: Component,\n  children\n}) {\n  if (catchVal) {\n    return /*#__PURE__*/React__default.createElement(RemixCatchContext.Provider, {\n      value: catchVal\n    }, /*#__PURE__*/React__default.createElement(Component, null));\n  }\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);\n}\n\n/**\n * When app's don't provide a root level CatchBoundary, we default to this.\n */\nfunction RemixRootDefaultCatchBoundary() {\n  let caught = useCatch();\n  return /*#__PURE__*/React__default.createElement(RemixRootDefaultCatchBoundaryImpl, {\n    caught: caught\n  });\n}\nfunction RemixRootDefaultCatchBoundaryImpl({\n  caught\n}) {\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Unhandled Thrown Response!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, caught.status, \" \", caught.statusText), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information.\"\n              );\n            `\n    }\n  })));\n}\n\nexport { RemixCatchBoundary, RemixErrorBoundary, RemixRootDefaultCatchBoundary, RemixRootDefaultErrorBoundary, V2_RemixRootDefaultErrorBoundary, useCatch };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport { invariant as default };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { parsePath } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Gets all the links for a set of matches. The modules are assumed to have been\n * loaded already.\n */\nfunction getLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map(match => {\n    var _module$links;\n    let module = routeModules[match.route.id];\n    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];\n  }).flat(1);\n  let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);\n  return dedupe(descriptors, preloads);\n}\nasync function prefetchStyleLinks(routeModule) {\n  if (!routeModule.links) return;\n  let descriptors = routeModule.links();\n  if (!descriptors) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n\n  // don't block for non-matching media queries\n  let matchingLinks = styleLinks.filter(link => !link.media || window.matchMedia(link.media).matches);\n  await Promise.all(matchingLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise(resolve => {\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      // if a navigation interrupts this prefetch React will update the <head>\n      // and remove the link we put in there manually, so we check if it's still\n      // there before trying to remove it\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) return false;\n\n  // <link> may not have an href if <link rel=\"preload\"> is used with imagesrcset + imagesizes\n  // https://github.com/remix-run/remix/issues/184\n  // https://html.spec.whatwg.org/commit-snapshots/cb4f5ff75de5f4cbd7013c4abad02f21c77d4d1c/#attr-link-imagesrcset\n  if (object.href == null) {\n    return object.rel === \"preload\" && (typeof object.imageSrcSet === \"string\" || typeof object.imagesrcset === \"string\") && (typeof object.imageSizes === \"string\" || typeof object.imagesizes === \"string\");\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getStylesheetPrefetchLinks(matches, manifest, routeModules) {\n  let links = await Promise.all(matches.map(async match => {\n    let mod = await loadRouteModule(manifest.routes[match.route.id], routeModules);\n    return mod.links ? mod.links() : [];\n  }));\n  return links.flat(1).filter(isHtmlLinkDescriptor).filter(link => link.rel === \"stylesheet\" || link.rel === \"preload\").map(link => link.rel === \"preload\" ? {\n    ...link,\n    rel: \"prefetch\"\n  } : {\n    ...link,\n    rel: \"prefetch\",\n    as: \"style\"\n  });\n}\n\n// This is ridiculously identical to transition.ts `filterMatchesToLoad`\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {\n  let path = parsePathPatch(page);\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    var _currentMatches$index;\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname ||\n      // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith(\"*\")) && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n\n  // NOTE: keep this mostly up-to-date w/ the transition data diff, but this\n  // version doesn't care about submissions\n  let newMatches = mode === \"data\" && location.search !== path.search ?\n  // this is really similar to stuff in transition.ts, maybe somebody smarter\n  // than me (or in less of a hurry) can share some of it. You're the best.\n  nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    if (!manifestRoute.hasLoader) {\n      return false;\n    }\n    if (isNew(match, index) || matchPathChanged(match, index)) {\n      return true;\n    }\n    if (match.route.shouldRevalidate) {\n      var _currentMatches$;\n      let routeChoice = match.route.shouldRevalidate({\n        currentUrl: new URL(location.pathname + location.search + location.hash, window.origin),\n        currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},\n        nextUrl: new URL(page, window.origin),\n        nextParams: match.params,\n        defaultShouldRevalidate: true\n      });\n      if (typeof routeChoice === \"boolean\") {\n        return routeChoice;\n      }\n    }\n    return true;\n  }) : nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    return (mode === \"assets\" || manifestRoute.hasLoader) && (isNew(match, index) || matchPathChanged(match, index));\n  });\n  return newMatches;\n}\nfunction getDataLinkHrefs(page, matches, manifest) {\n  let path = parsePathPatch(page);\n  return dedupeHrefs(matches.filter(match => manifest.routes[match.route.id].hasLoader).map(match => {\n    let {\n      pathname,\n      search\n    } = path;\n    let searchParams = new URLSearchParams(search);\n    searchParams.set(\"_data\", match.route.id);\n    return `${pathname}?${searchParams}`;\n  }));\n}\nfunction getModuleLinkHrefs(matches, manifestPatch) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifestPatch.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\n\n// The `<Script>` will render rel=modulepreload for the current page, we don't\n// need to include them in a page prefetch, this gives us the list to remove\n// while deduping.\nfunction getCurrentPageModulePreloadHrefs(matches, manifest) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifest.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction dedupe(descriptors, preloads) {\n  let set = new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let str = JSON.stringify(descriptor);\n    if (!set.has(str)) {\n      set.add(str);\n      deduped.push(descriptor);\n    }\n    return deduped;\n  }, []);\n}\n\n// https://github.com/remix-run/history/issues/897\nfunction parsePathPatch(href) {\n  let path = parsePath(href);\n  if (path.search === undefined) path.search = \"\";\n  return path;\n}\n\nexport { dedupe, getDataLinkHrefs, getLinksForMatches, getModuleLinkHrefs, getNewMatchesForLinks, getStylesheetPrefetchLinks, isHtmlLinkDescriptor, isPageLinkDescriptor, prefetchStyleLinks };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n/**\n * A React component that is rendered when the server throws a Response.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/catch-boundary\n */\n\n/**\n * A React component that is rendered when there is an error on a route.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/error-boundary\n */\n\n/**\n * V2 version of the ErrorBoundary that eliminates the distinction between\n * Error and Catch Boundaries and behaves like RR 6.4 errorElement and captures\n * errors with useRouteError()\n */\n\n/**\n * A function that defines `<link>` tags to be inserted into the `<head>` of\n * the document on route transitions.\n *\n * @see https://remix.run/route/meta\n */\n\n/**\n * A function that returns an object of name + content pairs to use for\n * `<meta>` tags for a route. These tags will be merged with (and take\n * precedence over) tags from parent routes.\n *\n * @see https://remix.run/route/meta\n */\n\n// TODO: Replace in v2\n\n/**\n * A name/content pair used to render `<meta>` tags in a meta function for a\n * route. The value can be either a string, which will render a single `<meta>`\n * tag, or an array of strings that will render multiple tags with the same\n * `name` attribute.\n */\n\n// TODO: Replace in v2\n\n/**\n * A React component that is rendered for a route.\n */\n\n/**\n * An arbitrary object that is associated with a route.\n *\n * @see https://remix.run/route/handle\n */\n\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import( /* webpackIgnore: true */route.module);\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    // User got caught in the middle of a deploy and the CDN no longer has the\n    // asset we're trying to import! Reload from the server and the user\n    // (should) get the new manifest--unless the developer purged the static\n    // assets, the manifest path, but not the documents \uD83D\uDE2C\n    window.location.reload();\n    return new Promise(() => {\n      // check out of this hook cause the DJs never gonna re[s]olve this\n    });\n  }\n}\n\n/**\n * @deprecated The `unstable_shouldReload` function has been removed, so this\n * function will never run and route data will be revalidated on every request.\n * Please update the function name to `shouldRevalidate` and use the\n * `ShouldRevalidateFunction` interface.\n */\n\nexport { loadRouteModule };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// This escapeHtml utility is based on https://github.com/zertosh/htmlescape\n// License: https://github.com/zertosh/htmlescape/blob/0527ca7156a524d256101bb310a9f970f63078ad/LICENSE\n\n// We've chosen to inline the utility here to reduce the number of npm dependencies we have,\n// slightly decrease the code size compared the original package and make it esm compatible.\n\nconst ESCAPE_LOOKUP = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nconst ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction escapeHtml(html) {\n  return html.replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);\n}\nfunction createHtml(html) {\n  return {\n    __html: html\n  };\n}\n\nexport { createHtml, escapeHtml };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { ErrorResponse } from '@remix-run/router';\n\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in remix-server-runtime/errors.ts :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      error.stack = val.stack;\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\nexport { deserializeErrors };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { redirect } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\nimport { fetchData, isRedirectResponse, isCatchResponse, isDeferredResponse, parseDeferredReadableStream } from './data.js';\nimport { prefetchStyleLinks } from './links.js';\nimport invariant from './invariant.js';\nimport { RemixRoute, RemixRouteError } from './components.js';\n\n// Create a map of routes by parentId to use recursively instead of\n// repeatedly filtering the manifest.\nfunction groupRoutesByParentId(manifest) {\n  let routes = {};\n  Object.values(manifest).forEach(route => {\n    let parentId = route.parentId || \"\";\n    if (!routes[parentId]) {\n      routes[parentId] = [];\n    }\n    routes[parentId].push(route);\n  });\n  return routes;\n}\nfunction createServerRoutes(manifest, routeModules, future, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest)) {\n  return (routesByParentId[parentId] || []).map(route => {\n    let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === \"root\" || route.hasErrorBoundary : route.id === \"root\" || route.hasCatchBoundary || route.hasErrorBoundary;\n    let dataRoute = {\n      caseSensitive: route.caseSensitive,\n      element: /*#__PURE__*/React.createElement(RemixRoute, {\n        id: route.id\n      }),\n      errorElement: hasErrorBoundary ? /*#__PURE__*/React.createElement(RemixRouteError, {\n        id: route.id\n      }) : undefined,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      handle: routeModules[route.id].handle\n      // Note: we don't need loader/action/shouldRevalidate on these routes\n      // since they're for a static render\n    };\n\n    let children = createServerRoutes(manifest, routeModules, future, route.id, routesByParentId);\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createClientRoutes(manifest, routeModulesCache, future, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest)) {\n  return (routesByParentId[parentId] || []).map(route => {\n    let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === \"root\" || route.hasErrorBoundary : route.id === \"root\" || route.hasCatchBoundary || route.hasErrorBoundary;\n    let dataRoute = {\n      caseSensitive: route.caseSensitive,\n      element: /*#__PURE__*/React.createElement(RemixRoute, {\n        id: route.id\n      }),\n      errorElement: hasErrorBoundary ? /*#__PURE__*/React.createElement(RemixRouteError, {\n        id: route.id\n      }) : undefined,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      // handle gets added in via useMatches since we aren't guaranteed to\n      // have the route module available here\n      handle: undefined,\n      loader: createDataFunction(route, routeModulesCache, false),\n      action: createDataFunction(route, routeModulesCache, true),\n      shouldRevalidate: createShouldRevalidate(route, routeModulesCache)\n    };\n    let children = createClientRoutes(manifest, routeModulesCache, future, route.id);\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createShouldRevalidate(route, routeModules) {\n  return function (arg) {\n    let module = routeModules[route.id];\n    invariant(module, `Expected route module to be loaded for ${route.id}`);\n    if (module.shouldRevalidate) {\n      return module.shouldRevalidate(arg);\n    }\n    return arg.defaultShouldRevalidate;\n  };\n}\nasync function loadRouteModuleWithBlockingLinks(route, routeModules) {\n  let routeModule = await loadRouteModule(route, routeModules);\n  await prefetchStyleLinks(routeModule);\n  return routeModule;\n}\nfunction createDataFunction(route, routeModules, isAction) {\n  return async ({\n    request\n  }) => {\n    let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules);\n    try {\n      if (isAction && !route.hasAction) {\n        let msg = `Route \"${route.id}\" does not have an action, but you are trying ` + `to submit to it. To fix this, please add an \\`action\\` function to the route`;\n        console.error(msg);\n        throw new Error(msg);\n      } else if (!isAction && !route.hasLoader) {\n        return null;\n      }\n      let result = await fetchData(request, route.id);\n      if (result instanceof Error) {\n        throw result;\n      }\n      if (isRedirectResponse(result)) {\n        throw getRedirect(result);\n      }\n      if (isCatchResponse(result)) {\n        throw result;\n      }\n      if (isDeferredResponse(result) && result.body) {\n        return await parseDeferredReadableStream(result.body);\n      }\n      return result;\n    } finally {\n      await routeModulePromise;\n    }\n  };\n}\nfunction getRedirect(response) {\n  let status = parseInt(response.headers.get(\"X-Remix-Status\"), 10) || 302;\n  let url = response.headers.get(\"X-Remix-Redirect\");\n  let headers = {};\n  let revalidate = response.headers.get(\"X-Remix-Revalidate\");\n  if (revalidate) {\n    headers[\"X-Remix-Revalidate\"] = revalidate;\n  }\n  return redirect(url, {\n    status,\n    headers\n  });\n}\n\nexport { createClientRoutes, createServerRoutes };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { AbortedDeferredError, UNSAFE_DeferredData } from '@remix-run/router';\n\n/**\n * Data for a route that was returned from a `loader()`.\n *\n * Note: This moves to unknown in ReactRouter and eventually likely in Remix\n */\n\nfunction isCatchResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Catch\") != null;\n}\nfunction isErrorResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Error\") != null;\n}\nfunction isRedirectResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Redirect\") != null;\n}\nfunction isDeferredResponse(response) {\n  var _response$headers$get;\n  return response instanceof Response && !!((_response$headers$get = response.headers.get(\"Content-Type\")) !== null && _response$headers$get !== void 0 && _response$headers$get.match(/text\\/remix-deferred/));\n}\nasync function fetchData(request, routeId) {\n  let url = new URL(request.url);\n  url.searchParams.set(\"_data\", routeId);\n  let init = {\n    signal: request.signal\n  };\n  if (request.method !== \"GET\") {\n    init.method = request.method;\n    let contentType = request.headers.get(\"Content-Type\");\n    init.body =\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    contentType && /\\bapplication\\/x-www-form-urlencoded\\b/.test(contentType) ? new URLSearchParams(await request.text()) : await request.formData();\n  }\n  let response = await fetch(url.href, init);\n  if (isErrorResponse(response)) {\n    let data = await response.json();\n    let error = new Error(data.message);\n    error.stack = data.stack;\n    return error;\n  }\n  return response;\n}\nconst DEFERRED_VALUE_PLACEHOLDER_PREFIX = \"__deferred_promise:\";\nasync function parseDeferredReadableStream(stream) {\n  if (!stream) {\n    throw new Error(\"parseDeferredReadableStream requires stream argument\");\n  }\n  let deferredData;\n  let deferredResolvers = {};\n  try {\n    let sectionReader = readStreamSections(stream);\n\n    // Read the first section to get the critical data\n    let initialSectionResult = await sectionReader.next();\n    let initialSection = initialSectionResult.value;\n    if (!initialSection) throw new Error(\"no critical data\");\n    let criticalData = JSON.parse(initialSection);\n\n    // Setup deferred data and resolvers for later based on the critical data\n    if (typeof criticalData === \"object\" && criticalData !== null) {\n      for (let [eventKey, value] of Object.entries(criticalData)) {\n        if (typeof value !== \"string\" || !value.startsWith(DEFERRED_VALUE_PLACEHOLDER_PREFIX)) {\n          continue;\n        }\n        deferredData = deferredData || {};\n        deferredData[eventKey] = new Promise((resolve, reject) => {\n          deferredResolvers[eventKey] = {\n            resolve: value => {\n              resolve(value);\n              delete deferredResolvers[eventKey];\n            },\n            reject: error => {\n              reject(error);\n              delete deferredResolvers[eventKey];\n            }\n          };\n        });\n      }\n    }\n\n    // Read the rest of the stream and resolve deferred promises\n    (async () => {\n      try {\n        for await (let section of sectionReader) {\n          // Determine event type and data\n          let [event, ...sectionDataStrings] = section.split(\":\");\n          let sectionDataString = sectionDataStrings.join(\":\");\n          let data = JSON.parse(sectionDataString);\n          if (event === \"data\") {\n            for (let [key, value] of Object.entries(data)) {\n              if (deferredResolvers[key]) {\n                deferredResolvers[key].resolve(value);\n              }\n            }\n          } else if (event === \"error\") {\n            for (let [key, value] of Object.entries(data)) {\n              let err = new Error(value.message);\n              err.stack = value.stack;\n              if (deferredResolvers[key]) {\n                deferredResolvers[key].reject(err);\n              }\n            }\n          }\n        }\n        for (let [key, resolver] of Object.entries(deferredResolvers)) {\n          resolver.reject(new AbortedDeferredError(`Deferred ${key} will never be resolved`));\n        }\n      } catch (error) {\n        // Reject any existing deferred promises if something blows up\n        for (let resolver of Object.values(deferredResolvers)) {\n          resolver.reject(error);\n        }\n      }\n    })();\n    return new UNSAFE_DeferredData({\n      ...criticalData,\n      ...deferredData\n    });\n  } catch (error) {\n    for (let resolver of Object.values(deferredResolvers)) {\n      resolver.reject(error);\n    }\n    throw error;\n  }\n}\nasync function* readStreamSections(stream) {\n  let reader = stream.getReader();\n  let buffer = [];\n  let sections = [];\n  let closed = false;\n  let encoder = new TextEncoder();\n  let decoder = new TextDecoder();\n  let readStreamSection = async () => {\n    if (sections.length > 0) return sections.shift();\n\n    // Read from the stream until we have at least one complete section to process\n    while (!closed && sections.length === 0) {\n      let chunk = await reader.read();\n      if (chunk.done) {\n        closed = true;\n        break;\n      }\n      // Buffer the raw chunks\n      buffer.push(chunk.value);\n      try {\n        // Attempt to split off a section from the buffer\n        let bufferedString = decoder.decode(mergeArrays(...buffer));\n        let splitSections = bufferedString.split(\"\\n\\n\");\n        if (splitSections.length >= 2) {\n          // We have a complete section, so add it to the sections array\n          sections.push(...splitSections.slice(0, -1));\n          // Remove the section from the buffer and store the rest for future processing\n          buffer = [encoder.encode(splitSections.slice(-1).join(\"\\n\\n\"))];\n        }\n\n        // If we successfully parsed at least one section, break out of reading the stream\n        // to allow upstream processing of the processable sections\n        if (sections.length > 0) {\n          break;\n        }\n      } catch {\n        // If we failed to parse the buffer it was because we failed to decode the stream\n        // because we are missing bytes that we haven't yet received, so continue reading\n        // from the stream until we have a complete section\n        continue;\n      }\n    }\n\n    // If we have a complete section, return it\n    if (sections.length > 0) {\n      return sections.shift();\n    }\n\n    // If we have no complete section, but we have no more chunks to process,\n    // split those sections and clear out the buffer as there is no more data\n    // to process. If this errors, let it bubble up as the stream ended\n    // without valid data\n    if (buffer.length > 0) {\n      let bufferedString = decoder.decode(mergeArrays(...buffer));\n      sections = bufferedString.split(\"\\n\\n\").filter(s => s);\n      buffer = [];\n    }\n\n    // Return any remaining sections that have been processed\n    return sections.shift();\n  };\n  let section = await readStreamSection();\n  while (section) {\n    yield section;\n    section = await readStreamSection();\n  }\n}\nfunction mergeArrays(...arrays) {\n  let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0));\n  let offset = 0;\n  for (let arr of arrays) {\n    out.set(arr, offset);\n    offset += arr.length;\n  }\n  return out;\n}\n\nexport { fetchData, isCatchResponse, isDeferredResponse, isErrorResponse, isRedirectResponse, parseDeferredReadableStream };\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nexport { RemixBrowser } from './browser.js';\nexport { Form, Outlet, isRouteErrorResponse, unstable_useBlocker, unstable_usePrompt, useAsyncError, useAsyncValue, useBeforeUnload, useFormAction, useHref, useLocation, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useSearchParams, useSubmit } from 'react-router-dom';\nexport { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, Scripts, RemixContext as UNSAFE_RemixContext, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition } from './components.js';\nexport { useCatch } from './errorBoundaries.js';\nexport { ScrollRestoration } from './scroll-restoration.js';\nexport { RemixServer } from './server.js';\n", "/**\n * @remix-run/react v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useLocation, UNSAFE_useScrollRestoration } from 'react-router-dom';\nimport { useMatches } from './components.js';\n\nlet STORAGE_KEY = \"positions\";\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n *\n * @see https://remix.run/components/scroll-restoration\n */\nfunction ScrollRestoration({\n  getKey,\n  ...props\n}) {\n  let location = useLocation();\n  let matches = useMatches();\n  UNSAFE_useScrollRestoration({\n    getKey,\n    storageKey: STORAGE_KEY\n  });\n\n  // In order to support `getKey`, we need to compute a \"key\" here so we can\n  // hydrate that up so that SSR scroll restoration isn't waiting on React to\n  // hydrate. *However*, our key on the server is not the same as our key on\n  // the client!  So if the user's getKey implementation returns the SSR\n  // location key, then let's ignore it and let our inline <script> below pick\n  // up the client side history state key\n  let key = React.useMemo(() => {\n    if (!getKey) return null;\n    let userKey = getKey(location, matches);\n    return userKey !== location.key ? userKey : null;\n  },\n  // Nah, we only need this the first time for the SSR render\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  let restoreScroll = ((STORAGE_KEY, restoreKey) => {\n    if (!window.history.state || !window.history.state.key) {\n      let key = Math.random().toString(32).slice(2);\n      window.history.replaceState({\n        key\n      }, \"\");\n    }\n    try {\n      let positions = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || \"{}\");\n      let storedY = positions[restoreKey || window.history.state.key];\n      if (typeof storedY === \"number\") {\n        window.scrollTo(0, storedY);\n      }\n    } catch (error) {\n      console.error(error);\n      sessionStorage.removeItem(STORAGE_KEY);\n    }\n  }).toString();\n  return /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`\n    }\n  }));\n}\n\nexport { ScrollRestoration };\n"],
  "mappings": "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",
  "names": ["createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "invariant", "value", "message", "Error", "warning", "cond", "console", "warn", "createKey", "Math", "random", "toString", "substr", "getHistoryState", "index", "idx", "current", "_extends", "parsePath", "_ref", "charAt", "path", "parsedPath", "hashIndex", "indexOf", "searchIndex", "getLocation", "createHref", "validateLocation", "document", "defaultView", "v5Compat", "history", "action", "Action", "Pop", "listener", "getIndex", "replaceState", "handlePop", "nextIndex", "delta", "push", "Push", "historyState", "url", "pushState", "assign", "replace", "Replace", "createURL", "base", "origin", "href", "URL", "listen", "fn", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "detectErrorBoundary", "parentPath", "manifest", "map", "treePath", "id", "join", "children", "indexRoute", "hasErrorBoundary", "pathOrLayoutRoute", "undefined", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "slice", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "initialScore", "some", "isSplat", "splatPenalty", "indexRouteValue", "filter", "s", "reduce", "segment", "paramRe", "test", "dynamicSegmentValue", "emptySegmentValue", "staticSegmentValue", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "_", "RegExp", "decodeURI", "error", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "JSON", "stringify", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "isTrackedPromise", "Promise", "_tracked", "unwrapTrackedPromise", "_error", "_data", "isRouteErrorResponse", "status", "statusText", "internal", "createRouter", "init", "defaultDetectErrorBoundary", "dataRoutes", "inFlightDataRoutes", "future", "v7_normalizeFormMethod", "unlistenHistory", "subscribers", "Set", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "m", "lazy", "loader", "router", "historyAction", "navigation", "IDLE_NAVIGATION", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "updateBlocker", "proceed", "reset", "deleteBlocker", "updateState", "startNavigation", "dispose", "clear", "abort", "deleteFetcher", "subscribe", "add", "delete", "newState", "subscriber", "completeNavigation", "_location$state", "_location$state2", "isActionReload", "formMethod", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "submission", "normalizeNavigateOptions", "userReplace", "formAction", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "Request", "handleLoaders", "fetcherSubmission", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "aborted", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "data", "formEncType", "formData", "activeSubmission", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "rf", "fetcher", "get", "revalidatingFetcher", "set", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "processLoaderData", "deferredData", "done", "markFetchRedirectsDone", "didAbortFetchLoads", "abortStaleFetchLoads", "getFetcher", "IDLE_FETCHER", "fetch", "isServer", "has", "abortFetcher", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "isFetchActionRedirect", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "_temp", "_window", "redirectLocation", "_isFetchActionRedirect", "ABSOLUTE_URL_REGEX", "isBrowser", "isDifferentBasename", "redirectHistoryAction", "redirectPreserveMethodStatusCodes", "currentMatches", "fetchersToLoad", "all", "f", "resolveDeferredResults", "controller", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "IDLE_BLOCKER", "newBlocker", "_ref2", "entries", "Array", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "isSubmissionNavigation", "isFetcher", "isValidMethod", "toUpperCase", "stripHashFromPath", "searchParams", "convertFormDataToSearchParams", "hasNakedIndexQuery", "append", "getLoaderMatchesUntilBoundary", "boundaryId", "boundaryMatches", "findIndex", "values", "currentUrl", "nextUrl", "defaultShouldRevalidate", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "shouldRevalidate", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "isPropertyStaticallyDefined", "immutableRouteKeys", "isStaticRequest", "isRouteRequest", "requestContext", "resultType", "onReject", "runHandler", "handler", "reject", "abortPromise", "race", "context", "e", "isResponse", "redirectStatusCodes", "headers", "protocol", "isSameBasename", "activeMatches", "resolvedLocation", "response", "contentType", "json", "text", "ErrorResponse", "statusCode", "isDeferredData", "_result$init", "_result$init2", "deferred", "Headers", "body", "URLSearchParams", "File", "name", "processRouteLoaderData", "foundError", "loaderHeaders", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "reverse", "find", "_temp4", "errorMessage", "resolveData", "validRequestMethods", "validMutationMethods", "isRevalidatingLoader", "then", "unwrap", "unwrappedData", "getAll", "v", "handle", "pathMatches", "AbortedDeferredError", "DeferredData", "validMutationMethodsArr", "validRequestMethodsArr", "UNSAFE_DEFERRED_SYMBOL", "paths", "constructor", "responseInit", "pendingKeysSet", "deferredKeys", "isArray", "onAbort", "unlistenAbortSignal", "acc", "trackPromise", "promise", "onSettle", "catch", "defineProperty", "emit", "settledKey", "k", "resolve", "pendingKeys", "Response", "createElement", "Boolean", "Symbol", "isPolyfill", "x", "y", "useSyncExternalStore", "subscribe", "getSnapshot", "getServerSnapshot", "value", "inst", "forceUpdate", "useState", "useLayoutEffect", "checkIfSnapshotChanged", "useEffect", "useDebugValue", "latestGetSnapshot", "prevValue", "nextValue", "is", "useHref", "to", "_temp", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "NavigationContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "LocationContext", "useLocation", "location", "useNavigate", "matches", "RouteContext", "locationPathname", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "React", "current", "useCallback", "options", "go", "path", "resolveTo", "parse", "replace", "push", "state", "useOutlet", "context", "outlet", "OutletContext", "_temp2", "useMemo", "useRoutes", "routes", "locationArg", "dataRouterStateContext", "DataRouterStateContext", "parentMatches", "routeMatch", "length", "parentParams", "params", "parentPathname", "parentPathnameBase", "parentRoute", "route", "locationFromContext", "_parsedLocationArg$pa", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "renderedMatches", "_renderMatches", "Object", "assign", "encodeLocation", "undefined", "_extends", "key", "navigationType", "NavigationType", "Pop", "DefaultErrorComponent", "error", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "fontStyle", "RenderedRoute", "_ref", "routeContext", "children", "dataRouterContext", "DataRouterContext", "static", "staticContext", "errorElement", "ErrorBoundary", "_deepestRenderedBoundaryId", "id", "dataRouterState", "errors", "errorIndex", "findIndex", "m", "Math", "min", "reduceRight", "index", "concat", "getChildren", "Component", "element", "RenderErrorBoundary", "useDataRouterState", "hookName", "useRouteContext", "useCurrentRouteId", "thisRoute", "useNavigation", "DataRouterStateHook", "UseNavigation", "navigation", "useMatches", "loaderData", "UseMatches", "data", "handle", "useLoaderData", "UseLoaderData", "routeId", "console", "_state$errors", "RouteErrorContext", "UseRouteError", "useAsyncValue", "AwaitContext", "_data", "useAsyncError", "_error", "RouterProvider", "fallbackElement", "router", "getState", "useSyncExternalStoreShim", "n", "navigate", "opts", "preventScrollReset", "Router", "historyAction", "initialized", "Routes", "Outlet", "props", "Route", "_props", "_ref4", "basenameProp", "locationProp", "staticProp", "navigationContext", "locationContext", "trailingPathname", "stripBasename", "_ref5", "createRoutesFromChildren", "Await", "_ref6", "resolve", "AwaitErrorBoundary", "ResolveAwait", "_ref7", "toRender", "parentPath", "Children", "forEach", "isValidElement", "treePath", "type", "Fragment", "apply", "join", "caseSensitive", "loader", "action", "hasErrorBoundary", "shouldRevalidate", "lazy", "detectErrorBoundary", "Boolean", "canUseDOM", "isServerEnvironment", "shim", "DataRouterHook", "AwaitRenderStatus", "neverSettledPromise", "window", "document", "createElement", "server", "client", "module", "createContext", "constructor", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "render", "component", "Promise", "promise", "pending", "success", "defineProperty", "get", "renderError", "reject", "catch", "_tracked", "then", "AbortedDeferredError", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "createBrowserRouter", "routes", "opts", "createRouter", "basename", "future", "history", "createBrowserHistory", "window", "hydrationData", "parseHydrationData", "detectErrorBoundary", "initialize", "_window", "state", "__staticRouterHydrationData", "errors", "_extends", "deserializeErrors", "entries", "Object", "serialized", "key", "val", "__type", "ErrorResponse", "status", "statusText", "data", "internal", "error", "Error", "message", "stack", "useDataRouterContext", "hookName", "ctx", "useContext", "DataRouterContext", "invariant", "useDataRouterState", "DataRouterStateContext", "useLinkClickHandler", "to", "_temp", "replace", "replaceProp", "preventScrollReset", "relative", "navigate", "useNavigate", "location", "useLocation", "path", "useResolvedPath", "useCallback", "preventDefault", "undefined", "createPath", "useScrollRestoration", "_temp3", "getKey", "storageKey", "router", "DataRouterHook", "UseScrollRestoration", "restoreScrollPosition", "DataRouterStateHook", "matches", "useMatches", "navigation", "useNavigation", "useEffect", "scrollRestoration", "usePageHide", "savedScrollPositions", "scrollY", "sessionStorage", "setItem", "SCROLL_RESTORATION_STORAGE_KEY", "JSON", "stringify", "document", "useLayoutEffect", "sessionPositions", "getItem", "parse", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "hash", "el", "getElementById", "slice", "scrollIntoView", "callback", "options", "capture", "addEventListener", "removeEventListener", "isBrowser", "ABSOLUTE_URL_REGEX", "Link", "NavLink", "createElement", "forwardRef", "ref", "onClick", "reloadDocument", "_ref4", "rest", "_objectWithoutPropertiesLoose", "_excluded", "NavigationContext", "absoluteHref", "isExternal", "test", "currentUrl", "URL", "href", "targetUrl", "startsWith", "protocol", "stripBasename", "pathname", "origin", "search", "useHref", "internalOnClick", "handleClick", "defaultPrevented", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "children", "_ref5", "_excluded2", "routerState", "navigator", "toPathname", "encodeLocation", "locationPathname", "nextLocationPathname", "toLowerCase", "isActive", "charAt", "length", "isPending", "ariaCurrent", "filter", "Boolean", "join", "require_use_sync_external_store_shim_production_min", "__commonJSMin", "exports", "e", "h", "a", "b", "k", "l", "m", "n", "p", "q", "d", "f", "c", "g", "r", "t", "u", "require_shim", "__commonJSMin", "exports", "module", "React", "init_dist", "import_shim", "_extends", "target", "i", "source", "key", "React", "init_dist", "import_react", "init_dist", "RemixErrorBoundary", "React__default", "props", "error", "state", "RemixRootDefaultErrorBoundary", "V2_RemixRootDefaultErrorBoundary", "useRouteError", "isRouteErrorResponse", "RemixRootDefaultCatchBoundaryImpl", "errorString", "RemixCatchContext", "useCatch", "RemixCatchBoundary", "catchVal", "Component", "children", "RemixRootDefaultCatchBoundary", "caught", "invariant", "value", "message", "init_dist", "loadRouteModule", "route", "routeModulesCache", "routeModule", "getLinksForMatches", "matches", "routeModules", "manifest", "descriptors", "match", "_module$links", "module", "preloads", "getCurrentPageModulePreloadHrefs", "dedupe", "prefetchStyleLinks", "routeModule", "styleLinks", "descriptor", "isPageLinkDescriptor", "matchingLinks", "link", "prefetchStyleLink", "resolve", "removeLink", "object", "isHtmlLinkDescriptor", "getStylesheetPrefetchLinks", "mod", "loadRouteModule", "getNewMatchesForLinks", "page", "nextMatches", "currentMatches", "location", "mode", "path", "parsePathPatch", "isNew", "index", "matchPathChanged", "_currentMatches$index", "_currentMatches$", "routeChoice", "manifestRoute", "getDataLinkHrefs", "dedupeHrefs", "pathname", "search", "searchParams", "getModuleLinkHrefs", "manifestPatch", "route", "hrefs", "set", "preloadsSet", "deduped", "str", "href", "parsePath", "ESCAPE_LOOKUP", "ESCAPE_REGEX", "escapeHtml", "html", "match", "createHtml", "useDataRouterContext", "context", "DataRouterContext", "invariant", "useDataRouterStateContext", "DataRouterStateContext", "RemixContext", "useRemixContext", "RemixRoute", "id", "routeModules", "Component", "RemixRouteError", "future", "error", "useRouteError", "CatchBoundary", "ErrorBoundary", "V2_RemixRootDefaultErrorBoundary", "RemixRootDefaultCatchBoundary", "RemixRootDefaultErrorBoundary", "isRouteErrorResponse", "tError", "RemixCatchBoundary", "usePrefetchBehavior", "prefetch", "theirElementProps", "maybePrefetch", "setMaybePrefetch", "shouldPrefetch", "setShouldPrefetch", "onFocus", "onBlur", "onMouseEnter", "onMouseLeave", "onTouchStart", "setIntent", "cancelIntent", "composeEventHandlers", "ABSOLUTE_URL_REGEX", "NavLink", "to", "props", "forwardedRef", "isAbsolute", "href", "useHref", "prefetchHandlers", "_extends", "PrefetchPageLinks", "Link", "theirHandler", "ourHandler", "event", "linksWarning", "Links", "manifest", "routeModules", "useRemixContext", "matches", "useDataRouterStateContext", "links", "getLinksForMatches", "link", "isPageLinkDescriptor", "PrefetchPageLinks", "_extends", "imageSrcSet", "React", "page", "dataLinkProps", "router", "useDataRouterContext", "matchRoutes", "PrefetchPageLinksImpl", "usePrefetchedStylesheets", "styleLinks", "setStyleLinks", "interrupted", "getStylesheetPrefetchLinks", "nextMatches", "linkProps", "location", "useLocation", "newMatchesForData", "getNewMatchesForLinks", "newMatchesForAssets", "dataHrefs", "getDataLinkHrefs", "moduleHrefs", "getModuleLinkHrefs", "href", "V1Meta", "loaderData", "meta", "parentsData", "match", "routeId", "data", "params", "routeModule", "routeMeta", "name", "value", "isOpenGraphTag", "content", "V2Meta", "_matches", "leafMeta", "i", "_match", "metaProps", "tagName", "isValidMetaTag", "json", "Meta", "future", "Await", "props", "isHydrated", "Scripts", "serverHandoffString", "abortDelay", "isStatic", "staticContext", "navigation", "useNavigation", "deferredScripts", "initialScripts", "_manifest$hmr", "contextScript", "activeDeferreds", "deferredData", "pendingKeys", "promiseKeyValues", "key", "DeferredHydrationScript", "trackedPromise", "toSerialize", "escapeHtml", "routeModulesScript", "index", "createHtml", "invariant", "routePreloads", "route", "preloads", "dedupe", "path", "dataKey", "ErrorDeferredHydrationScript", "error", "useAsyncError", "array", "useMatches", "useLoaderData", "init_router", "deserializeErrors", "errors", "entries", "serialized", "key", "val", "ErrorResponse", "error", "React", "init_dist", "init_router", "isCatchResponse", "response", "isErrorResponse", "isRedirectResponse", "isDeferredResponse", "_response$headers$get", "fetchData", "request", "routeId", "url", "init", "contentType", "data", "error", "DEFERRED_VALUE_PLACEHOLDER_PREFIX", "parseDeferredReadableStream", "stream", "deferredData", "deferredResolvers", "sectionReader", "readStreamSections", "initialSection", "criticalData", "eventKey", "value", "resolve", "reject", "section", "event", "sectionDataStrings", "sectionDataString", "key", "err", "resolver", "AbortedDeferredError", "DeferredData", "reader", "buffer", "sections", "closed", "encoder", "decoder", "readStreamSection", "chunk", "splitSections", "mergeArrays", "s", "arrays", "out", "total", "arr", "offset", "groupRoutesByParentId", "manifest", "routes", "route", "parentId", "createClientRoutes", "manifest", "routeModulesCache", "future", "parentId", "routesByParentId", "groupRoutesByParentId", "route", "hasErrorBoundary", "dataRoute", "RemixRoute", "RemixRouteError", "createDataFunction", "createShouldRevalidate", "children", "routeModules", "arg", "module", "invariant", "loadRouteModuleWithBlockingLinks", "routeModule", "loadRouteModule", "prefetchStyleLinks", "isAction", "request", "routeModulePromise", "msg", "result", "fetchData", "isRedirectResponse", "getRedirect", "isCatchResponse", "isDeferredResponse", "parseDeferredReadableStream", "response", "status", "url", "headers", "revalidate", "redirect", "router", "hmrAbortController", "newManifest", "routeIds", "m", "newRouteModules", "id", "_newManifest$hmr", "_window$__remixRouteM", "_window$__remixRouteM2", "_window$__remixRouteM3", "imported", "routes", "createClientRoutes", "signal", "unsub", "state", "RemixBrowser", "_props", "hydrationData", "deserializeErrors", "createBrowserRouter", "location", "RemixContext", "RemixErrorBoundary", "RemixRootDefaultErrorBoundary", "RouterProvider", "init_dist", "React", "init_dist", "STORAGE_KEY", "ScrollRestoration", "getKey", "props", "location", "useLocation", "matches", "useMatches", "useScrollRestoration", "key", "userKey", "restoreScroll", "restoreKey", "storedY", "error", "_extends"]
}
